//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.KortexDriver
{
    [Serializable]
    public class ActuatorFeedbackMsg : Message
    {
        public const string k_RosMessageName = "kortex_driver/ActuatorFeedback";
        public override string RosMessageName => k_RosMessageName;

        public uint command_id;
        public uint status_flags;
        public uint jitter_comm;
        public float position;
        public float velocity;
        public float torque;
        public float current_motor;
        public float voltage;
        public float temperature_motor;
        public float temperature_core;
        public uint fault_bank_a;
        public uint fault_bank_b;
        public uint warning_bank_a;
        public uint warning_bank_b;

        public ActuatorFeedbackMsg()
        {
            this.command_id = 0;
            this.status_flags = 0;
            this.jitter_comm = 0;
            this.position = 0.0f;
            this.velocity = 0.0f;
            this.torque = 0.0f;
            this.current_motor = 0.0f;
            this.voltage = 0.0f;
            this.temperature_motor = 0.0f;
            this.temperature_core = 0.0f;
            this.fault_bank_a = 0;
            this.fault_bank_b = 0;
            this.warning_bank_a = 0;
            this.warning_bank_b = 0;
        }

        public ActuatorFeedbackMsg(uint command_id, uint status_flags, uint jitter_comm, float position, float velocity, float torque, float current_motor, float voltage, float temperature_motor, float temperature_core, uint fault_bank_a, uint fault_bank_b, uint warning_bank_a, uint warning_bank_b)
        {
            this.command_id = command_id;
            this.status_flags = status_flags;
            this.jitter_comm = jitter_comm;
            this.position = position;
            this.velocity = velocity;
            this.torque = torque;
            this.current_motor = current_motor;
            this.voltage = voltage;
            this.temperature_motor = temperature_motor;
            this.temperature_core = temperature_core;
            this.fault_bank_a = fault_bank_a;
            this.fault_bank_b = fault_bank_b;
            this.warning_bank_a = warning_bank_a;
            this.warning_bank_b = warning_bank_b;
        }

        public static ActuatorFeedbackMsg Deserialize(MessageDeserializer deserializer) => new ActuatorFeedbackMsg(deserializer);

        private ActuatorFeedbackMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.command_id);
            deserializer.Read(out this.status_flags);
            deserializer.Read(out this.jitter_comm);
            deserializer.Read(out this.position);
            deserializer.Read(out this.velocity);
            deserializer.Read(out this.torque);
            deserializer.Read(out this.current_motor);
            deserializer.Read(out this.voltage);
            deserializer.Read(out this.temperature_motor);
            deserializer.Read(out this.temperature_core);
            deserializer.Read(out this.fault_bank_a);
            deserializer.Read(out this.fault_bank_b);
            deserializer.Read(out this.warning_bank_a);
            deserializer.Read(out this.warning_bank_b);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.command_id);
            serializer.Write(this.status_flags);
            serializer.Write(this.jitter_comm);
            serializer.Write(this.position);
            serializer.Write(this.velocity);
            serializer.Write(this.torque);
            serializer.Write(this.current_motor);
            serializer.Write(this.voltage);
            serializer.Write(this.temperature_motor);
            serializer.Write(this.temperature_core);
            serializer.Write(this.fault_bank_a);
            serializer.Write(this.fault_bank_b);
            serializer.Write(this.warning_bank_a);
            serializer.Write(this.warning_bank_b);
        }

        public override string ToString()
        {
            return "ActuatorFeedbackMsg: " +
            "\ncommand_id: " + command_id.ToString() +
            "\nstatus_flags: " + status_flags.ToString() +
            "\njitter_comm: " + jitter_comm.ToString() +
            "\nposition: " + position.ToString() +
            "\nvelocity: " + velocity.ToString() +
            "\ntorque: " + torque.ToString() +
            "\ncurrent_motor: " + current_motor.ToString() +
            "\nvoltage: " + voltage.ToString() +
            "\ntemperature_motor: " + temperature_motor.ToString() +
            "\ntemperature_core: " + temperature_core.ToString() +
            "\nfault_bank_a: " + fault_bank_a.ToString() +
            "\nfault_bank_b: " + fault_bank_b.ToString() +
            "\nwarning_bank_a: " + warning_bank_a.ToString() +
            "\nwarning_bank_b: " + warning_bank_b.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
