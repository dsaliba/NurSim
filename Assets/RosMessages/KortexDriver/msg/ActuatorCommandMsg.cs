//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.KortexDriver
{
    [Serializable]
    public class ActuatorCommandMsg : Message
    {
        public const string k_RosMessageName = "kortex_driver/ActuatorCommand";
        public override string RosMessageName => k_RosMessageName;

        public uint command_id;
        public uint flags;
        public float position;
        public float velocity;
        public float torque_joint;
        public float current_motor;

        public ActuatorCommandMsg()
        {
            this.command_id = 0;
            this.flags = 0;
            this.position = 0.0f;
            this.velocity = 0.0f;
            this.torque_joint = 0.0f;
            this.current_motor = 0.0f;
        }

        public ActuatorCommandMsg(uint command_id, uint flags, float position, float velocity, float torque_joint, float current_motor)
        {
            this.command_id = command_id;
            this.flags = flags;
            this.position = position;
            this.velocity = velocity;
            this.torque_joint = torque_joint;
            this.current_motor = current_motor;
        }

        public static ActuatorCommandMsg Deserialize(MessageDeserializer deserializer) => new ActuatorCommandMsg(deserializer);

        private ActuatorCommandMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.command_id);
            deserializer.Read(out this.flags);
            deserializer.Read(out this.position);
            deserializer.Read(out this.velocity);
            deserializer.Read(out this.torque_joint);
            deserializer.Read(out this.current_motor);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.command_id);
            serializer.Write(this.flags);
            serializer.Write(this.position);
            serializer.Write(this.velocity);
            serializer.Write(this.torque_joint);
            serializer.Write(this.current_motor);
        }

        public override string ToString()
        {
            return "ActuatorCommandMsg: " +
            "\ncommand_id: " + command_id.ToString() +
            "\nflags: " + flags.ToString() +
            "\nposition: " + position.ToString() +
            "\nvelocity: " + velocity.ToString() +
            "\ntorque_joint: " + torque_joint.ToString() +
            "\ncurrent_motor: " + current_motor.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
