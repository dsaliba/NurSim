//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.KortexDriver
{
    [Serializable]
    public class MotorFeedbackMsg : Message
    {
        public const string k_RosMessageName = "kortex_driver/MotorFeedback";
        public override string RosMessageName => k_RosMessageName;

        public uint motor_id;
        public float position;
        public float velocity;
        public float current_motor;
        public float voltage;
        public float temperature_motor;

        public MotorFeedbackMsg()
        {
            this.motor_id = 0;
            this.position = 0.0f;
            this.velocity = 0.0f;
            this.current_motor = 0.0f;
            this.voltage = 0.0f;
            this.temperature_motor = 0.0f;
        }

        public MotorFeedbackMsg(uint motor_id, float position, float velocity, float current_motor, float voltage, float temperature_motor)
        {
            this.motor_id = motor_id;
            this.position = position;
            this.velocity = velocity;
            this.current_motor = current_motor;
            this.voltage = voltage;
            this.temperature_motor = temperature_motor;
        }

        public static MotorFeedbackMsg Deserialize(MessageDeserializer deserializer) => new MotorFeedbackMsg(deserializer);

        private MotorFeedbackMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.motor_id);
            deserializer.Read(out this.position);
            deserializer.Read(out this.velocity);
            deserializer.Read(out this.current_motor);
            deserializer.Read(out this.voltage);
            deserializer.Read(out this.temperature_motor);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.motor_id);
            serializer.Write(this.position);
            serializer.Write(this.velocity);
            serializer.Write(this.current_motor);
            serializer.Write(this.voltage);
            serializer.Write(this.temperature_motor);
        }

        public override string ToString()
        {
            return "MotorFeedbackMsg: " +
            "\nmotor_id: " + motor_id.ToString() +
            "\nposition: " + position.ToString() +
            "\nvelocity: " + velocity.ToString() +
            "\ncurrent_motor: " + current_motor.ToString() +
            "\nvoltage: " + voltage.ToString() +
            "\ntemperature_motor: " + temperature_motor.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
