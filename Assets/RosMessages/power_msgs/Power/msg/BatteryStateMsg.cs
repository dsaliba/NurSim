//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.BuiltinInterfaces;

namespace RosMessageTypes.Power
{
    [Serializable]
    public class BatteryStateMsg : Message
    {
        public const string k_RosMessageName = "power_msgs/BatteryState";
        public override string RosMessageName => k_RosMessageName;

        //  Name of the battery
        public string name;
        //  Charge level of battery as percentage of maximum charge
        public float charge_level;
        //  If true, the battery is being charged
        public bool is_charging;
        //  When charging, this is the remaining time until fully charged.
        //  When discharging, this is the time until battery is empty.
        //  Non-zero values are considered valid.
        public DurationMsg remaining_time;
        //  Total capacity of battery
        public float total_capacity;
        //  Current capacity of battery
        public float current_capacity;
        //  Voltage of battery
        public float battery_voltage;
        //  Voltage of the supply breaker
        public float supply_voltage;
        //  Voltage of the charger
        public float charger_voltage;
        //  If true, robot is connected to the charger but not necessarily charging
        public bool is_charger_detected;

        public BatteryStateMsg()
        {
            this.name = "";
            this.charge_level = 0.0f;
            this.is_charging = false;
            this.remaining_time = new DurationMsg();
            this.total_capacity = 0.0f;
            this.current_capacity = 0.0f;
            this.battery_voltage = 0.0f;
            this.supply_voltage = 0.0f;
            this.charger_voltage = 0.0f;
            this.is_charger_detected = false;
        }

        public BatteryStateMsg(string name, float charge_level, bool is_charging, DurationMsg remaining_time, float total_capacity, float current_capacity, float battery_voltage, float supply_voltage, float charger_voltage, bool is_charger_detected)
        {
            this.name = name;
            this.charge_level = charge_level;
            this.is_charging = is_charging;
            this.remaining_time = remaining_time;
            this.total_capacity = total_capacity;
            this.current_capacity = current_capacity;
            this.battery_voltage = battery_voltage;
            this.supply_voltage = supply_voltage;
            this.charger_voltage = charger_voltage;
            this.is_charger_detected = is_charger_detected;
        }

        public static BatteryStateMsg Deserialize(MessageDeserializer deserializer) => new BatteryStateMsg(deserializer);

        private BatteryStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.name);
            deserializer.Read(out this.charge_level);
            deserializer.Read(out this.is_charging);
            this.remaining_time = DurationMsg.Deserialize(deserializer);
            deserializer.Read(out this.total_capacity);
            deserializer.Read(out this.current_capacity);
            deserializer.Read(out this.battery_voltage);
            deserializer.Read(out this.supply_voltage);
            deserializer.Read(out this.charger_voltage);
            deserializer.Read(out this.is_charger_detected);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.name);
            serializer.Write(this.charge_level);
            serializer.Write(this.is_charging);
            serializer.Write(this.remaining_time);
            serializer.Write(this.total_capacity);
            serializer.Write(this.current_capacity);
            serializer.Write(this.battery_voltage);
            serializer.Write(this.supply_voltage);
            serializer.Write(this.charger_voltage);
            serializer.Write(this.is_charger_detected);
        }

        public override string ToString()
        {
            return "BatteryStateMsg: " +
            "\nname: " + name.ToString() +
            "\ncharge_level: " + charge_level.ToString() +
            "\nis_charging: " + is_charging.ToString() +
            "\nremaining_time: " + remaining_time.ToString() +
            "\ntotal_capacity: " + total_capacity.ToString() +
            "\ncurrent_capacity: " + current_capacity.ToString() +
            "\nbattery_voltage: " + battery_voltage.ToString() +
            "\nsupply_voltage: " + supply_voltage.ToString() +
            "\ncharger_voltage: " + charger_voltage.ToString() +
            "\nis_charger_detected: " + is_charger_detected.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
